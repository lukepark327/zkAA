from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.code" as verifyEddsa;
import "ecc/babyjubjubParams.code" as context;

/// import "hashes/sha256/512bitPacked" as sha256packed;
import "hashes/sha256/1024bitPadded" as sha256;
import "utils/pack/u32/nonStrictUnpack256" as unpack256u;
import "utils/pack/u32/pack128" as pack128;


/// Arguments:
///    R: Curve point. Hidden version of the per-message nonce.
///    S: Field element. Signature to be verified.
///    A: Curve point. Public part of the key used to create S. Public key.
///    M0: 256bit array. First 256bits of the message used to create S.
///    M1: 256bit array. Trailing 256bits of the message used to create S.
///    context: Curve parameters used to create S.
///    h: Hash of (R, s).
def main(private field[2] R, private field S, field[2] A, u32[8] M0, u32[8] M1, field[2] h) {
	BabyJubJubParams context = context();

	bool isVerified = verifyEddsa(R, S, A, M0, M1, context);
	assert(isVerified);

	u32[8] Rx = unpack256u(R[0]);
    u32[8] Ry = unpack256u(R[1]);
	u32[8] s = unpack256u(S);
	u32[8] r = sha256(unpack256u(0), Rx, Ry, s);
	
	field[2] h_sig = [
		pack128(r[0..4]),
		pack128(r[4..8])
	];
	assert(h_sig[0] == h[0] && h_sig[1] == h[1]);

	return;
}
